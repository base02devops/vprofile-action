name: vprofile actions
on: workflow_dispatch
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: vprofileapp
  EKS_CLUSTER: vprofile-eks

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set Up Java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Verify Java Version
        run: java -version

      - name: Run Maven Tests
        run: mvn test

      - name: Checkstyle Analysis
        run: mvn checkstyle:checkstyle

      - name: Verify Required Reports
        run: |
          echo "Checking if required reports exist..."
          ls -R target/ || true
          ls target/checkstyle-result.xml || echo "Checkstyle report missing"

      - name: Setup SonarQube Scanner
        uses: warchant/setup-sonar-scanner@v7

      - name: Debug SonarQube Connection
        run: |
          echo "Checking SonarQube Server Status..."
          curl -I ${{ secrets.SONAR_URL }}

      - name: Run SonarQube Scan
        run: |
          sonar-scanner -X \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=src/ \
            -Dsonar.junit.reportsPath=target/surefire-reports/ \
            -Dsonar.jacoco.reportsPath=target/jacoco.exec \
            -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
            -Dsonar.java.binaries=target/test-classes/com/visualpathit/account || exit 1

  BUILD_AND_PUBLISH:
  needs: Testing 
  runs-on: ubuntu-latest
  steps:
    - name: Code checkout 
      uses: actions/checkout@v4

    - name: Build & Upload image to ECR
      uses: appleboy/docker-ecr-action@master
      with:
        access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        registry: ${{ secrets.REGISTRY }}
        repo: ${{ env.ECR_REPOSITORY }}
        region: ${{ env.AWS_REGION }}
        tags: latest,${{ github.run_number }}
        daemon_off: false
        dockerfile: ./Dockerfile
        context: ./ 
